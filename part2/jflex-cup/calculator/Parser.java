
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\010\000\002\003\003\000\002\011\005\000\002\012\005" +
    "\000\002\012\002\000\002\004\004\000\002\004\003\000" +
    "\002\010\005\000\002\010\003\000\002\013\004\000\002" +
    "\013\003\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\004\000\002\017\004\000\002\017\010" +
    "\000\002\022\005\000\002\022\002\000\002\021\005\000" +
    "\002\021\003\000\002\020\003\000\002\020\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\005\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\015\007\001\002\000\004\002\103\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\001\001\002" +
    "\000\012\006\010\014\016\015\015\020\013\001\002\000" +
    "\010\002\ufff5\007\ufff9\015\ufff5\001\002\000\004\007\037" +
    "\001\002\000\006\006\033\013\032\001\002\000\006\006" +
    "\ufff2\013\ufff2\001\002\000\006\002\ufffb\015\027\001\002" +
    "\000\010\006\024\015\015\020\013\001\002\000\006\006" +
    "\021\013\017\001\002\000\004\014\022\001\002\000\004" +
    "\007\ufffa\001\002\000\004\007\ufff7\001\002\000\006\006" +
    "\021\013\017\001\002\000\004\007\ufff8\001\002\000\012" +
    "\002\ufff5\006\ufff5\013\ufff5\015\ufff5\001\002\000\006\006" +
    "\ufff1\013\ufff1\001\002\000\004\002\ufffd\001\002\000\010" +
    "\006\024\015\015\020\013\001\002\000\006\002\ufffb\015" +
    "\027\001\002\000\004\002\ufffc\001\002\000\006\015\015" +
    "\020\013\001\002\000\012\002\ufff3\006\ufff3\013\ufff3\015" +
    "\ufff3\001\002\000\012\002\ufff6\006\ufff6\013\ufff6\015\ufff6" +
    "\001\002\000\006\006\033\013\032\001\002\000\012\002" +
    "\ufff4\006\ufff4\013\ufff4\015\ufff4\001\002\000\012\014\045" +
    "\015\044\016\043\020\041\001\002\000\012\004\073\006" +
    "\uffed\010\uffed\017\uffed\001\002\000\016\004\uffe8\006\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\017\uffe8\001\002\000\004\010" +
    "\101\001\002\000\012\014\045\015\044\016\043\020\041" +
    "\001\002\000\012\006\046\014\052\015\051\020\050\001" +
    "\002\000\016\004\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\017\uffe7\001\002\000\020\004\uffe4\006\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\017\uffe4\001\002\000\016\004\uffe6" +
    "\006\uffe6\010\uffe6\011\uffe6\012\uffe6\017\uffe6\001\002\000" +
    "\006\006\uffe1\013\uffe1\001\002\000\012\006\046\014\052" +
    "\015\051\020\050\001\002\000\006\006\uffe0\013\uffe0\001" +
    "\002\000\006\006\055\013\054\001\002\000\010\014\052" +
    "\015\051\020\050\001\002\000\020\004\uffe2\006\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2\001\002\000\020" +
    "\004\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\017" +
    "\uffe5\001\002\000\006\006\055\013\054\001\002\000\020" +
    "\004\uffe3\006\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\017" +
    "\uffe3\001\002\000\006\006\uffdf\013\uffdf\001\002\000\012" +
    "\004\073\006\uffed\011\074\012\075\001\002\000\004\006" +
    "\065\001\002\000\004\006\uffeb\001\002\000\012\014\045" +
    "\015\044\016\043\020\041\001\002\000\004\017\067\001" +
    "\002\000\012\014\045\015\044\016\043\020\041\001\002" +
    "\000\010\006\uffef\010\uffef\017\uffef\001\002\000\010\014" +
    "\045\015\044\020\041\001\002\000\010\006\ufff0\010\ufff0" +
    "\017\ufff0\001\002\000\010\014\045\015\044\020\041\001" +
    "\002\000\010\014\uffe9\015\uffe9\020\uffe9\001\002\000\010" +
    "\014\uffea\015\uffea\020\uffea\001\002\000\012\004\073\006" +
    "\uffed\010\uffed\017\uffed\001\002\000\010\006\uffee\010\uffee" +
    "\017\uffee\001\002\000\004\006\uffec\001\002\000\004\015" +
    "\007\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\010\002\003\003\005\011\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\010\013\013\015\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\033\001\001\000\002\001\001" +
    "\000\004\012\025\001\001\000\006\013\024\015\011\001" +
    "\001\000\004\010\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\027\015\011\001\001\000\004\012" +
    "\030\001\001\000\002\001\001\000\004\015\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\035\001" +
    "\001\000\002\001\001\000\006\016\037\017\041\001\001" +
    "\000\004\022\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\061\017\063\021\062\001\001\000\006" +
    "\005\046\007\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\060" +
    "\007\052\001\001\000\002\001\001\000\004\006\055\001" +
    "\001\000\004\007\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\070\022\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\037\017\065\001" +
    "\001\000\002\001\001\000\006\016\037\017\067\001\001" +
    "\000\002\001\001\000\004\016\077\001\001\000\002\001" +
    "\001\000\004\016\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\101\011\004\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= definitions 
            {
              Object RESULT =null;
		int defsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String defs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        File file = new File("./output.java");
        if(file.createNewFile()) {
            System.out.println("Created New file: " + file.getName());
        }
        else {
            System.out.println("Output file already exists with name : " + file.getName());
        }
        FileWriter writer = new FileWriter(file.getName());
        writer.write("import java.lang.Math;\n");
        writer.write("public class output {");
        // writer.write(calls);
        writer.write(defs);
        writer.write("}");
        writer.close();
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definitions ::= FUNCTION defArgs LBRAC brackets RBRAC definitions 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int otherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String other = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\n\tpublic static String %s%s) {\n\t\t%s\n\t}\n%s",func,args,body,other); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definitions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definitions ::= calls 
            {
              String RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String call = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s",call); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definitions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // calls ::= FUNCTION callArgs otherCalls 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String others = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(%s%s));%s\n\t}\n",func,args,others); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // otherCalls ::= FUNCTION callArgs otherCalls 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String others = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\n\t\tSystem.out.println(%s%s));%s",func,args,others); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otherCalls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // otherCalls ::= 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("otherCalls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defArgs ::= VARIABLE defArgsTail 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("String %s%s",id,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defArgs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // defArgs ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defArgs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defArgsTail ::= COMMA VARIABLE defArgsTail 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", String %s%s",id1,args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defArgsTail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // defArgsTail ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defArgsTail",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // callArgs ::= StringOrCallFunction callArgsTail 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // callArgs ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // callArgsTail ::= COMMA StringOrCallFunction callArgsTail 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", %s%s",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // callArgsTail ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StringOrCallFunction ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"",str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringOrCallFunction",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StringOrCallFunction ::= FUNCTION callArgs 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s)",func,str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringOrCallFunction",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // brackets ::= bracketsExpr plusTail 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\treturn %s%s;",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // brackets ::= IF chooseIf RPAREN brackets ELSE brackets 
            {
              String RESULT =null;
		int res1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int res1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String res1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ans1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ans1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ans1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ans2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ans2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ans2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("if(%s)\n\t\t\t%s\n\t\telse\n\t\t\t%s",res1,ans1,ans2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // plusTail ::= PLUS bracketsExpr plusTail 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("+%s%s",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plusTail",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // plusTail ::= 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plusTail",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // chooseIf ::= bracketsExpr prefixOrSuffix bracketsExpr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(op.equals("prefix")){
                    RESULT = String.format("%s.startsWith(%s)",e1,e2);
                }
                else{
                    RESULT = String.format("%s.endsWith(%s)",e1,e2);
                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chooseIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // chooseIf ::= brackets 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s",res); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chooseIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // prefixOrSuffix ::= SUFFIX 
            {
              String RESULT =null;
		 RESULT = String.format("suffix"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixOrSuffix",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // prefixOrSuffix ::= PREFIX 
            {
              String RESULT =null;
		 RESULT = String.format("prefix"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixOrSuffix",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bracketsExpr ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"",str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracketsExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bracketsExpr ::= VARIABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s",v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracketsExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bracketsExpr ::= FUNCTION callArgsInsideBrackets 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s)",func,str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracketsExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // callArgsInsideBrackets ::= StringOrCallFunctionOrVariableInsideBrackets callArgsTailInsideBrackets 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsInsideBrackets",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callArgsInsideBrackets ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsInsideBrackets",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // callArgsTailInsideBrackets ::= COMMA StringOrCallFunctionOrVariableInsideBrackets callArgsTailInsideBrackets 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tail = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", %s%s",e,tail); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsTailInsideBrackets",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // callArgsTailInsideBrackets ::= RPAREN 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callArgsTailInsideBrackets",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StringOrCallFunctionOrVariableInsideBrackets ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"",str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringOrCallFunctionOrVariableInsideBrackets",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StringOrCallFunctionOrVariableInsideBrackets ::= VARIABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s",v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringOrCallFunctionOrVariableInsideBrackets",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StringOrCallFunctionOrVariableInsideBrackets ::= FUNCTION callArgsInsideBrackets 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s)",func,str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringOrCallFunctionOrVariableInsideBrackets",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
