/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.io.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal           IDENTIFIER,PLUS, LPAREN, RPAREN,LBRACKET,RBRACKET,PREFIX,SUFFIX,COMMA;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal            program;
non terminal String    expr,expr_list,funcCall,chooseIdentifier,chooseArgs,chooseStrLiteral,funcDef,callArgs,defArgs,callArgsTail,callArgsTail2,defArgsTail,strConcat,strConcatTail,prefix,suffix;      // used to store evaluated subexpressions


/**
 *  Precedence Declarations
 */
//precedence left PLUS, MINUS;
//precedence right EXP;

/**
 *  The Grammar Rules
 */

program ::= expr_list:e {:
			System.out.println("import java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			System.out.printf("%s", e);
			System.out.println("\t}");
			System.out.println("}");

        File file = new File("./output.java");
        if(file.createNewFile()) {
            System.out.println("Created New file: " + file.getName());
        }
        else {
            System.out.println("Output file already exists with name : " + file.getName());
        }
        FileWriter writer = new FileWriter(file.getName());
        writer.write("import java.lang.Math;\n");
        writer.write("public class Main {\n");
        writer.write("\tpublic static void main(String[] args) {\n");
        writer.write(e);
        writer.write("\t}\n");
        writer.write("}\n");
        writer.close();
			 :}
	;


expr_list ::= IDENTIFIER:id1 chooseIdentifier  {: RESULT = String.format(""); :}
          | STRING_LITERAL:str1 chooseStrLiteral    {: RESULT = String.format(" "); :}
          ;

chooseIdentifier ::= LPAREN chooseArgs:arguments {: RESULT = String.format(""); :}
                 | strConcat:concat    {: RESULT = String.format(" "); :}
                 ;

chooseArgs ::= defArgs:arguments LBRACKET expr:expression RBRACKET {: RESULT = String.format(" "); :}
           | callArgs:arguments  {: RESULT = String.format(" "); :}
           //| IDENTIFIER:id1 example {: RESULT = String.format(" "); :}
           ;


defArgs ::= IDENTIFIER:id1 defArgsTail:tail RPAREN {: RESULT = String.format(" "); :}
        | RPAREN{: RESULT = String.format(" "); :}
        ;

defArgsTail ::= COMMA IDENTIFIER:id1 defArgsTail:args {: RESULT = String.format(" "); :}
            | {: RESULT = String.format(" "); :}
            ;

callArgs ::= STRING_LITERAL:str1 callArgsTail:tail RPAREN{: RESULT = String.format(" "); :}
         | RPAREN{: RESULT = String.format(" "); :}
         ;

callArgsTail ::= COMMA callArgsTail2:args {: RESULT = String.format(""); :}
             |   {: RESULT = String.format(" "); :}
             ;

callArgsTail2 ::= STRING_LITERAL:str1  callArgsTail {: RESULT = String.format(""); :}
              ;

expr ::= STRING_LITERAL:str1 {: RESULT = String.format(" "); :}
     | funcCall:call {: RESULT = String.format(" "); :}
     ;

chooseStrLiteral ::= strConcat:concat {: RESULT = String.format(" "); :}
                 | PREFIX prefix:pref STRING_LITERAL:str1 {: RESULT = String.format("\"%s prefix %s\"",str1); :}
                 | SUFFIX suffix:suff STRING_LITERAL:str1 {: RESULT = String.format("\"%s suffix %s\"",str1); :}
                 ;

strConcat ::= PLUS STRING_LITERAL:str1 strConcatTail:tail {: RESULT = String.format(" "); :}
          |   PLUS IDENTIFIER:id1 strConcatTail:tail {: RESULT = String.format(" "); :}
          | {: RESULT = String.format(" "); :}
          ;

strConcatTail ::= PLUS STRING_LITERAL:str1 strConcat {: RESULT = String.format(" "); :}
              | PLUS IDENTIFIER:id1 strConcat {: RESULT = String.format(" "); :}
              | {: RESULT = String.format(" "); :}
              ;

prefix ::= STRING_LITERAL:str2 {: RESULT = String.format("\"%s prefix %s\"",str2); :}
       ;

suffix ::=  STRING_LITERAL:str2 {: RESULT = String.format("\"%s suffix %s\"",str2); :}
       ;