/* Simple +/-/* StringOrCallFunctionession language; parser evaluates constant StringOrCallFunctionessions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.io.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal           PLUS, LPAREN, RPAREN, LBRAC, RBRAC, PREFIX, SUFFIX, COMMA, VARIABLE, FUNCTION, IF, WRONGIF, ELSE, WHITESPACE;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal            program;
non terminal String    declarations,defArgs,BracketsConcInIf,callConcInIf,callArgsInsideBrackets,exprInCall,argumentsInCallPlusTail,callArgsTailInsideBrackets,chooseIfCalls,argumentsInCall,StringOrCallFunctionOrVariableInsideBrackets,defArgsTail,calls,otherCalls,callArgs,callArgsTail,bracketsExpr,brackets,prefixOrSuffix,chooseIf,plusTail;

/**
 *  Precedence Declarations
precedence left PLUS, MINUS;
precedence right EXP;
 */

/**
 *  The Grammar Rules
 */

program ::= declarations:defs {:
        File file = new File("./output.java");
        if(file.createNewFile()) {
            System.out.println("Created New file: " + file.getName());
        }
        else {
            System.out.println("Output file already exists with name : " + file.getName());
        }
        FileWriter writer = new FileWriter(file.getName());
        writer.write("import java.lang.Math;\n");
        writer.write("public class output {");
        writer.write(defs);
        writer.write("}");
        writer.close();
			 :}
	;

// -- Declarations --
declarations ::= FUNCTION:func defArgs:args LBRAC brackets:body RBRAC declarations:other {: RESULT = String.format("\n\tpublic static String %s%s) {\n\t\t%s\n\t}\n%s",func,args,body,other); :}
            |   calls:call {: RESULT = String.format("%s",call); :}
            |    {: RESULT = String.format("public static void main(String[] args){}"); :}
            ;

defArgs ::= VARIABLE:id defArgsTail:tail {: RESULT = String.format("String %s%s",id,tail); :}
        | RPAREN {: RESULT = String.format(""); :}
        ;

defArgsTail ::= COMMA VARIABLE:id1 defArgsTail:args {: RESULT = String.format(", String %s%s",id1,args); :}
            | RPAREN {: RESULT = String.format(""); :}
            ;

// -- Calls --

calls   ::= argumentsInCall:all otherCalls:others {: RESULT = String.format("\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(%s);%s\n\t}\n",all,others); :}
        ;

otherCalls  ::= argumentsInCall:all otherCalls:others {: RESULT = String.format("\n\t\tSystem.out.println(%s);%s",all,others); :}
            |   {: RESULT = String.format(""); :}
            ;

callArgs ::= argumentsInCall:e callArgsTail:tail {: RESULT = String.format("%s%s",e,tail); :}
         | RPAREN {: RESULT = String.format(""); :}
         ;

callArgsTail ::= COMMA argumentsInCall:e callArgsTail:tail {: RESULT = String.format(", %s%s",e,tail); :}
             | RPAREN {: RESULT = String.format(""); :}
             ;

argumentsInCall ::= exprInCall:expr argumentsInCallPlusTail:tail {: RESULT = String.format("(%s)%s",expr,tail); :}
                ;

argumentsInCallPlusTail    ::= PLUS exprInCall:e argumentsInCallPlusTail:tail {: RESULT = String.format("+(%s)%s",e,tail); :}
                            |  {: RESULT = String.format(""); :}
                            ;

exprInCall ::=  STRING_LITERAL:str  {: RESULT = String.format("\"%s\"",str); :}
            |   FUNCTION:func callArgs:str {: RESULT = String.format("%s%s)",func,str); :}
            |   IF chooseIfCalls:res1 RPAREN exprInCall:ans1  callConcInIf:tail1 ELSE exprInCall:ans2   {: RESULT = String.format("(%s?%s%s:%s)",res1,ans1,tail1,ans2); :}
            ;

callConcInIf    ::= PLUS exprInCall:ans callConcInIf:tail {: RESULT = String.format("+%s%s",ans,tail); :}
                    | {: RESULT = String.format(""); :}
                    ;


chooseIfCalls ::= argumentsInCall:e1 prefixOrSuffix:op argumentsInCall:e2 {:
                if(op.equals("prefix")){
                    RESULT = String.format("(%s).startsWith(%s)",e2,e1);
                }
                else{
                    RESULT = String.format("(%s).endsWith(%s)",e2,e1);
                } :}
            |   exprInCall:res {: RESULT = String.format("%s",res); :}
            ;

// -- inside a function body --

brackets    ::= bracketsExpr:e plusTail:str {: RESULT = String.format("return (%s)%s;" ,e,str); :}
            ;


plusTail    ::= PLUS bracketsExpr:e plusTail:tail {: RESULT = String.format("+(%s)%s",e,tail); :}
            |   {: RESULT = String.format(""); :}
            ;

chooseIf    ::= bracketsExpr:e1 prefixOrSuffix:op bracketsExpr:e2 {:
                if(op.equals("prefix")){
                    RESULT = String.format("%s.startsWith(%s)",e2,e1);
                }
                else{
                    RESULT = String.format("%s.endsWith(%s)",e2,e1);
                } :}
            |   bracketsExpr:res {: RESULT = String.format("%s",res); :}
            ;

prefixOrSuffix ::=  SUFFIX {: RESULT = String.format("suffix"); :}
                |   PREFIX  {: RESULT = String.format("prefix"); :}
                ;

bracketsExpr    ::=   STRING_LITERAL:str {: RESULT = String.format("\"%s\"",str); :}
                |     VARIABLE:v {: RESULT = String.format("%s",v); :}
                |     FUNCTION:func callArgsInsideBrackets:str {: RESULT = String.format("%s%s)",func,str); :}
                |     IF chooseIf:res1 RPAREN bracketsExpr:ans1 BracketsConcInIf:tail1 ELSE bracketsExpr:ans2 {: RESULT = String.format("(%s?%s%s:%s)",res1,ans1,tail1,ans2); :}
                ;

BracketsConcInIf    ::= PLUS bracketsExpr:ans BracketsConcInIf:tail {: RESULT = String.format("+%s%s",ans,tail); :}
                    | {: RESULT = String.format(""); :}
                    ;

callArgsInsideBrackets  ::= StringOrCallFunctionOrVariableInsideBrackets:e callArgsTailInsideBrackets:tail {: RESULT = String.format("%s%s",e,tail); :}
                        |   RPAREN {: RESULT = String.format(""); :}
                        ;

callArgsTailInsideBrackets ::= COMMA StringOrCallFunctionOrVariableInsideBrackets:e callArgsTailInsideBrackets:tail {: RESULT = String.format(", %s%s",e,tail); :}
                            | PLUS StringOrCallFunctionOrVariableInsideBrackets:e callArgsTailInsideBrackets:tail {: RESULT = String.format("+ %s%s",e,tail); :}
                            | RPAREN {: RESULT = String.format(""); :}
                            ;

StringOrCallFunctionOrVariableInsideBrackets    ::=         STRING_LITERAL:str {: RESULT = String.format("\"%s\"",str); :}
                                                |           VARIABLE:v {: RESULT = String.format("%s",v); :}
                                                |           FUNCTION:func callArgsInsideBrackets:str {: RESULT = String.format("%s%s)",func,str); :}
                                                ;